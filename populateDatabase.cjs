require('dotenv').config();

const admin = require('firebase-admin');

// This line reads the variable from your .env file
const serviceAccountFileName = process.env.FIREBASE_ADMIN_SERVICE_ACCOUNT_FILE_NAME;

// Check if the environment variable is set
if (!serviceAccountFileName) {
  console.error("Error: FIREBASE_ADMIN_SERVICE_ACCOUNT_FILE_NAME is not set in your .env file.");
  process.exit(1);
}

// Now, require the service account file using the variable
const serviceAccount = require(`./${serviceAccountFileName}`);

// Initialize Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

// Our data schema with some initial sample data
const initialData = {
  // Users (Workers) Collection
  users: [
    {
      email: "thabo.nkosi@jobzar.co.za",
      password_hash: "hashedpassword123", // Placeholder, will be generated by your app
      first_name: "Thabo",
      last_name: "Nkosi",
      phone_number: "+27712345678",
      id_number: "9005155123456",
      registration_date: new Date("2024-09-01"),
      is_paid: true,
      payment_date: new Date("2024-09-02"),
      certification_status: "in_progress",
      whatsapp_opt_in: true
    }
  ],

  // Courses Collection
  courses: [
    {
      title: "Basic Housekeeping Skills",
      description: "A foundational course covering essential home cleaning and maintenance techniques.",
      price: 150,
      duration_minutes: 120,
      prerequisites: [],
      created_at: new Date()
    },
    {
      title: "Child Care Essentials",
      description: "Learn fundamental skills for safe and effective child care.",
      price: 150,
      duration_minutes: 150,
      prerequisites: [],
      created_at: new Date()
    }
  ],

  // Modules Collection
  modules: [
    {
      course_title: "Basic Housekeeping Skills", // Use this to link in the script
      title: "Module 1: Cleaning Tools & Techniques",
      description: "An overview of common cleaning tools and their proper use.",
      order_in_course: 1,
      created_at: new Date()
    },
    {
      course_title: "Basic Housekeeping Skills",
      title: "Module 2: Kitchen & Bathroom Hygiene",
      description: "Focus on sanitary cleaning practices for key areas of the home.",
      order_in_course: 2,
      created_at: new Date()
    }
  ],

  // Lessons Collection
  lessons: [
    {
      module_title: "Module 1: Cleaning Tools & Techniques", // Use this to link
      title: "Lesson 1.1: Vacuuming Best Practices",
      content_type: "video",
      content_url: "https://your-cloud-storage-url/video1.mp4",
      order_in_module: 1,
      duration_minutes: 15,
      created_at: new Date()
    },
    {
      module_title: "Module 1: Cleaning Tools & Techniques",
      title: "Lesson 1.2: All-Purpose Cleaners",
      content_type: "text",
      content_url: "https://your-cloud-storage-url/text1.html",
      order_in_module: 2,
      duration_minutes: 10,
      created_at: new Date()
    }
  ],

  // UserPaymentTransactions Collection
  user_payment_transactions: [
    {
      user_email: "thabo.nkosi@jobzar.co.za", // Use email to link
      amount: 150,
      currency: "ZAR",
      transaction_id: "PAY123456789",
      status: "completed",
      payment_gateway: "Payfast",
      transaction_date: new Date("2024-09-02")
    }
  ]
};

// Function to populate the database
async function populateDatabase() {
  console.log("Starting to populate Firestore with initial data for JobzaR Academy...");

  // Create Users and get their document IDs
  console.log("Creating Users collection...");
  const userRefs = {};
  for (const user of initialData.users) {
    const docRef = await db.collection('users').add(user);
    userRefs[user.email] = docRef.id;
    console.log(`Created user: ${user.email} with ID: ${docRef.id}`);
  }

  // Create Courses and get their document IDs
  console.log("Creating Courses collection...");
  const courseRefs = {};
  for (const course of initialData.courses) {
    const docRef = await db.collection('courses').add(course);
    courseRefs[course.title] = docRef.id;
    console.log(`Created course: ${course.title} with ID: ${docRef.id}`);
  }

  // Create Modules and link them to courses
  console.log("Creating Modules collection...");
  const moduleRefs = {};
  for (const module of initialData.modules) {
    const courseId = courseRefs[module.course_title];
    const docRef = await db.collection('modules').add({
      ...module,
      course_id: courseId,
      course_title: null // Remove the temporary key
    });
    moduleRefs[module.title] = docRef.id;
    console.log(`Created module: ${module.title} with ID: ${docRef.id}`);
  }

  // Create Lessons and link them to modules
  console.log("Creating Lessons collection...");
  const lessonRefs = {};
  for (const lesson of initialData.lessons) {
    const moduleId = moduleRefs[lesson.module_title];
    const docRef = await db.collection('lessons').add({
      ...lesson,
      module_id: moduleId,
      module_title: null // Remove the temporary key
    });
    lessonRefs[lesson.title] = docRef.id;
    console.log(`Created lesson: ${lesson.title} with ID: ${docRef.id}`);
  }

  // Create Payment Transactions and link to users
  console.log("Creating UserPaymentTransactions collection...");
  for (const transaction of initialData.user_payment_transactions) {
    const userId = userRefs[transaction.user_email];
    const docRef = await db.collection('user_payment_transactions').add({
      ...transaction,
      user_id: userId,
      user_email: null // Remove the temporary key
    });
    console.log(`Created transaction with ID: ${docRef.id}`);
  }

  console.log("Database population complete! All collections and documents are created and linked.");
}

populateDatabase().catch(console.error);